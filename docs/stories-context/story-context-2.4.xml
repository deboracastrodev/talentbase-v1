<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>2.4</storyId>
    <title>Admin User Management Dashboard</title>
    <status>Draft</status>
    <generatedAt>2025-10-07</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/Users/debor/Documents/sistemas/talentbase-v1/docs/stories/story-2.4.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>um admin</asA>
    <iWant>visualizar e gerenciar todos os usuários (candidatos e empresas)</iWant>
    <soThat>eu possa aprovar empresas, desativar usuários e manter a qualidade da plataforma</soThat>
    <tasks>
      <task id="1" acs="2,3,4,5,9">
        <title>Criar API de listagem de usuários</title>
        <subtasks>
          <subtask>Implementar endpoint GET /api/v1/admin/users</subtask>
          <subtask>Adicionar filtros por role e status</subtask>
          <subtask>Implementar busca por nome/email</subtask>
          <subtask>Configurar paginação Django REST</subtask>
        </subtasks>
      </task>
      <task id="2" acs="1,6,7">
        <title>Implementar permissões admin</title>
        <subtasks>
          <subtask>Criar IsAdmin permission class</subtask>
          <subtask>Proteger todos os endpoints admin</subtask>
          <subtask>Implementar verificação de role no frontend</subtask>
        </subtasks>
      </task>
      <task id="3" acs="1,2,6">
        <title>Criar interface de gerenciamento</title>
        <subtasks>
          <subtask>Criar route /admin/users</subtask>
          <subtask>Implementar tabela com design system</subtask>
          <subtask>Criar modal de detalhes do usuário</subtask>
        </subtasks>
      </task>
      <task id="4" acs="7,8">
        <title>Implementar alteração de status</title>
        <subtasks>
          <subtask>Criar endpoints PATCH para status</subtask>
          <subtask>Implementar notificações email</subtask>
          <subtask>Validar transições de status</subtask>
        </subtasks>
      </task>
      <task id="5" acs="10">
        <title>Implementar criação manual</title>
        <subtasks>
          <subtask>Criar formulário de criação de usuário</subtask>
          <subtask>Implementar criação por role</subtask>
          <subtask>Validação e feedback de sucesso</subtask>
        </subtasks>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Dashboard admin em /admin/users</criterion>
    <criterion id="2">Visualização em tabela de todos os usuários com colunas: nome, email, role, status, created_at</criterion>
    <criterion id="3">Filtrar por role (all, admin, candidate, company)</criterion>
    <criterion id="4">Filtrar por status (all, active, pending, inactive)</criterion>
    <criterion id="5">Buscar por nome ou email</criterion>
    <criterion id="6">Clicar na linha do usuário → abre modal de detalhes do usuário</criterion>
    <criterion id="7">Admin pode alterar status do usuário (ativar, desativar, aprovar empresa)</criterion>
    <criterion id="8">Mudança de status dispara notificação por email ao usuário</criterion>
    <criterion id="9">Paginação (20 usuários por página)</criterion>
    <criterion id="10">Admin pode criar usuários manualmente (candidate, company, admin)</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/epics/tech-spec-epic-2.md</path>
        <title>Technical Specification - Epic 2: Authentication &amp; User Management</title>
        <section>Story 2.4: Admin User Management Dashboard</section>
        <snippet>Route: /admin/users | API: GET /api/v1/admin/users?role=&amp;status=&amp;search= | Features: Filter by role/status, search by name/email, pagination (20 users/page), user detail modal | Permissions: Admin only</snippet>
      </doc>
      <doc>
        <path>docs/epics/tech-spec-epic-2.md</path>
        <title>Technical Specification - Epic 2</title>
        <section>Role-Based Access Control (RBAC)</section>
        <snippet>Django Permissions: IsAuthenticated, IsAdmin, IsOwner, IsCandidate, IsCompany | Remix Route Protection: requireAuth(request, 'admin') in loader functions | Enforcement: All API endpoints decorated with permission classes, frontend routes check role</snippet>
      </doc>
      <doc>
        <path>docs/bestpraticies/BACKEND_BEST_PRACTICES.md</path>
        <title>Backend Best Practices</title>
        <section>Arquitetura em Camadas</section>
        <snippet>Clean Architecture OBRIGATÓRIA: Presentation Layer (views.py, serializers.py) → Application Layer (services/, use_cases/) → Domain Layer (models.py, validators.py) → Infrastructure Layer (ORM, External APIs, Cache). Separação: Models = estrutura de dados | Services = lógica de negócio | Views = coordenação (thin controllers) | Serializers = validação de dados</snippet>
      </doc>
      <doc>
        <path>docs/bestpraticies/FRONTEND_BEST_PRACTICES.md</path>
        <title>Frontend Best Practices</title>
        <section>Componentização</section>
        <snippet>Princípio da Responsabilidade Única: cada componente deve ter uma única responsabilidade. Hierarquia: routes/ (Páginas Remix) → components/ (componentes de negócio) → design-system (componentes reutilizáveis)</snippet>
      </doc>
      <doc>
        <path>docs/arquitetura/authentication.md</path>
        <title>Authentication &amp; Authorization</title>
        <section>Permission Classes (DRF)</section>
        <snippet>IsAdmin: request.user.is_authenticated and request.user.role == 'admin' | IsCandidate: role == 'candidate' | IsCompany: role == 'company'</snippet>
      </doc>
    </docs>
    <code>
      <file>
        <path>apps/api/authentication/models.py</path>
        <kind>model</kind>
        <symbol>User</symbol>
        <lines>62-112</lines>
        <reason>User model with role-based access (admin, candidate, company) and is_active status - core to user management</reason>
      </file>
      <file>
        <path>apps/api/authentication/serializers.py</path>
        <kind>serializer</kind>
        <symbol>UserSerializer, CandidateRegistrationSerializer, CompanyRegistrationSerializer, LoginSerializer</symbol>
        <lines>1-50</lines>
        <reason>Existing serializers for user data representation and validation - reference for admin user management serializers</reason>
      </file>
      <file>
        <path>apps/api/authentication/views.py</path>
        <kind>view</kind>
        <symbol>get_redirect_url</symbol>
        <lines>1-30</lines>
        <reason>Role-based redirect logic - pattern for role-based UI routing in admin dashboard</reason>
      </file>
    </code>
    <dependencies>
      <python>
        <package name="django" version="^5.0"/>
        <package name="djangorestframework" version="^3.14"/>
        <package name="django-cors-headers" version="^4.3.0"/>
        <package name="psycopg2-binary" version="^2.9.9"/>
        <package name="python-decouple" version="^3.8"/>
        <package name="celery" version="^5.3.0"/>
        <package name="redis" version="^5.0.0"/>
        <package name="pycpfcnpj" version="^1.8"/>
        <package name="django-encrypted-model-fields" version="^0.6.5"/>
      </python>
      <node>
        <package name="@remix-run/node" version="^2.14.0"/>
        <package name="@remix-run/react" version="^2.14.0"/>
        <package name="@talentbase/design-system" version="workspace:*"/>
        <package name="lucide-react" version="^0.544.0"/>
        <package name="react" version="^18.2.0"/>
        <package name="react-dom" version="^18.2.0"/>
      </node>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="1">Admin-only access to all endpoints - use IsAdmin permission class</constraint>
    <constraint id="2">Audit logging for status changes - log admin ID, timestamp, action, reason</constraint>
    <constraint id="3">Input validation for manual user creation</constraint>
    <constraint id="4">Rate limiting on admin actions</constraint>
    <constraint id="5">Clean Architecture: Views (thin controllers) → Services (business logic) → Models (data structure)</constraint>
    <constraint id="6">Dashboard route: packages/web/app/routes/admin.users.tsx</constraint>
    <constraint id="7">API views: apps/api/admin/views.py</constraint>
    <constraint id="8">Permission classes: apps/api/core/permissions.py</constraint>
    <constraint id="9">Components: packages/web/app/components/admin/</constraint>
    <constraint id="10">Use select_related for efficient user listing queries with related profiles</constraint>
  </constraints>

  <interfaces>
    <api>
      <endpoint method="GET" path="/api/v1/admin/users" permission="IsAdmin">
        <description>List users with filters</description>
        <queryParams>
          <param name="role" type="string" values="all,admin,candidate,company"/>
          <param name="status" type="string" values="all,active,pending,inactive"/>
          <param name="search" type="string" description="Search by name or email"/>
          <param name="page" type="integer" description="Page number"/>
        </queryParams>
        <response>Paginated list of users with name, email, role, status, created_at</response>
      </endpoint>
      <endpoint method="GET" path="/api/v1/admin/users/:id" permission="IsAdmin">
        <description>Get user details</description>
        <response>User object with related profile data</response>
      </endpoint>
      <endpoint method="PATCH" path="/api/v1/admin/users/:id" permission="IsAdmin">
        <description>Update user status</description>
        <body>
          <field name="is_active" type="boolean"/>
          <field name="status" type="string"/>
          <field name="reason" type="string" optional="true"/>
        </body>
        <response>Updated user object</response>
      </endpoint>
      <endpoint method="POST" path="/api/v1/admin/users" permission="IsAdmin">
        <description>Create user manually</description>
        <body>
          <field name="email" type="string" required="true"/>
          <field name="password" type="string" required="true"/>
          <field name="role" type="string" values="candidate,company,admin" required="true"/>
          <field name="profile_data" type="object" description="Role-specific profile fields"/>
        </body>
        <response>Created user object</response>
      </endpoint>
    </api>
  </interfaces>

  <tests>
    <standards>
      Backend: pytest + pytest-django for unit tests, coverage with pytest-cov
      Frontend: vitest for unit tests, Playwright for E2E tests
      Testing pattern: Arrange-Act-Assert with clear test naming (test_&lt;action&gt;_&lt;condition&gt;_&lt;expected&gt;)
      API tests: Test permissions, validation, success/error flows, edge cases
      Frontend tests: Component rendering, user interactions, accessibility
    </standards>
    <locations>
      <location>apps/api/admin/tests/test_views.py</location>
      <location>packages/web/app/routes/__tests__/admin.users.test.tsx</location>
      <location>packages/web/app/components/admin/__tests__/</location>
      <location>packages/web/e2e/admin-user-management.spec.ts</location>
    </locations>
    <ideas>
      <test ac="1,2,6">E2E: Admin navigates to /admin/users, sees table with users, clicks row to open modal</test>
      <test ac="3,4,5">Unit: API filters users by role, status, and search term correctly</test>
      <test ac="7">Unit: Admin changes user status via PATCH endpoint, receives success response</test>
      <test ac="8">Integration: Status change triggers email notification (mock email service)</test>
      <test ac="9">Unit: API returns paginated results (20 users per page)</test>
      <test ac="10">Integration: Admin creates user manually, user appears in list with correct role</test>
      <test>Security: Non-admin user receives 403 when accessing admin endpoints</test>
      <test>Validation: Invalid status transition returns 400 error with clear message</test>
    </ideas>
  </tests>
</story-context>
